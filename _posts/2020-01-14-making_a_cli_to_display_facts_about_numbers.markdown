---
layout: post
title:      "Making a CLI to Display Facts About Numbers"
date:       2020-01-15 00:53:32 +0000
permalink:  making_a_cli_to_display_facts_about_numbers
---


For my Command Line Interface Data Gem Portfolio Project, I decided to do something related to math due to my familiarity with the subject. Through the use of a certain [github page](https://github.com/public-apis/public-apis), I was able to find a free API that aligned with my interests and needs: [numbersapi](https://numbersapi.com). This was good and while it wouldn't be too difficult to get a fact for any user input number (get user input in CLI, pass input to API, instantiate it into the url, get the hash containing the appropriate info and parse it, pass the parsed hash into a Number object to assign the keys of the hash to instance variables, etc.), this would require the API to fetch data from the site every time the user wanted a fact about a number, which would be process intensive.
So the solution I came up with was to, instead, call a range of numbers for the user to choose from thus making it so that we only need to query **numbersapi** once for all the data we would work with in an instance of our CLI. Furthermore, **numbersapi** has two kinds of facts, trivia and math facts, so to handle this, I implemented two methods inside my API #get_trivia_facts and #get_math_facts, which get info from **numbersapi** as a hash of hashes, which I parse and turn into an array of hashes then I pass each hash into my Number class for processing and assignment into one of two class variable arrays, @@trvia or @@math, based on the value of the 'type' attribute. Then I implement a third method into the API, #get_fact_arrays, that just calls the prior two methods so as to reduce the size of the CLI file.
The CLI file works by first loading the facts with API.new.get_fact_arrays then asking the user what kind of fact they'd like to hear about (1 for trivia, 2 for math), then asking which number they'd like to hear the fact about, between 1 and 100 inclusive. Any time that the program receives unexpected input, it will tell the user that the input was unexpected, and then re-prompt the user for input. In addition to hear up to two kinds of facts about numbers 1 to 100, the user can also view the list of facts they've asked for by accessing the @history instance variable via options in the CLI methods #main_menu and #continue?. Lastly, the program will only quit if the user specifically tells it to do so, to make sure that the user isn't confused by the CLI abruptly ending.
